# Generated by Django 5.2.6 on 2025-09-18 11:14

import django.db.models.deletion
from django.db import migrations, models, connection
from django.db.migrations.operations.base import Operation


def drop_cart_shared_if_exists(apps, schema_editor):
    table = 'store_cart'
    col = 'cart_shared'
    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT COUNT(*) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME=%s AND COLUMN_NAME=%s",
            [table, col],
        )
        row = cursor.fetchone()
        if not row or not row[0]:
            # nothing to do
            return
        cursor.execute(f"ALTER TABLE `{table}` DROP COLUMN `{col}`;")


class Migration(migrations.Migration):

    dependencies = [
        ('store', '0010_remove_cart_cart_shared_remove_product_collection_and_more'),
    ]

    operations = [
        # safely drop cart_shared if present; some DBs already had it removed.
        migrations.RunPython(drop_cart_shared_if_exists, migrations.RunPython.noop),

        # The original auto-generated migration tried to remove 'Collection' and add 'collection'.
        # The physical column is already present in the DB and is used by FKs. We need the
        # migration state to include the new `collection` field, but we must not run DDL that
        # drops or re-adds the column. Use SeparateDatabaseAndState to update state only.
        migrations.SeparateDatabaseAndState(
            database_operations=[
                # Avoid executing an empty SQL statement (MySQL errors if only comments).
                migrations.RunPython(lambda apps, schema_editor: None),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='product',
                    name='collection',
                    field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products', to='store.collection'),
                ),
            ],
        ),
    ]
